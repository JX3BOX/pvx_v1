{"version":3,"sources":["webpack:///./node_modules/lua-json/index.js","webpack:///./node_modules/lua-json/node_modules/luaparse/luaparse.js"],"names":["isNull","isBoolean","isNumber","isString","isArray","isObject","isEmpty","fromPairs","keys","map","repeat","parse","parseLua","formatLuaString","string","singleQuote","replace","valueKeys","false","true","null","formatLuaKey","match","format","value","options","eol","spaces","rec","i","toString","spacesEnd","e","join","key","Error","luaAstToJson","ast","includes","type","operator","argument","name","__internal_table_key","fields","object","field","values","init","length","arguments","body","comments","module","exports","root","factory","objectTypes","freeExports","nodeType","freeModule","freeGlobal","global","moduleExports","window","self","this","input","version","defaultOptions","wait","scope","locations","ranges","onCreateNode","onCreateScope","onDestroyScope","EOF","StringLiteral","Keyword","Identifier","NumericLiteral","Punctuator","BooleanLiteral","NilLiteral","VarargLiteral","tokenTypes","errors","unexpected","expected","expectedToken","unfinishedString","malformedNumber","invalidVar","labelStatement","label","breakStatement","gotoStatement","returnStatement","args","ifStatement","clauses","ifClause","condition","elseifClause","elseClause","whileStatement","doStatement","repeatStatement","localStatement","variables","assignmentStatement","callStatement","expression","functionStatement","identifier","parameters","isLocal","forNumericStatement","variable","start","end","step","forGenericStatement","iterators","chunk","literal","raw","tableKey","tableKeyString","tableValue","tableConstructorExpression","binaryExpression","left","right","unaryExpression","memberExpression","base","indexer","indexExpression","index","callExpression","tableCallExpression","stringCallExpression","comment","finishNode","node","trackLocations","location","pop","complete","loc","range","token","previousToken","lookahead","tokenStart","line","lineStart","scopes","scopeDepth","globals","slice","Array","prototype","indexOf","Object","array","element","indexOfObject","property","sprintf","call","extend","src","prop","dest","hasOwnProperty","raise","error","col","message","apply","SyntaxError","column","raiseUnexpectedToken","found","near","lex","skipWhiteSpace","charCodeAt","scanComment","charCode","next","isIdentifierStart","scanIdentifierOrKeyword","scanStringLiteral","scanNumericLiteral","isDecDigit","scanVarargLiteral","scanPunctuator","scanLongStringLiteral","charAt","consumeEOL","peekCharCode","isLineTerminator","isWhiteSpace","isIdentifierPart","isKeyword","delimiter","stringStart","readEscapeSequence","String","fromCharCode","readLongString","character","readHexLiteral","readDecLiteral","digit","fractionStart","exponentStart","digitStart","fraction","binaryExponent","binarySign","isHexDigit","parseInt","Math","pow","parseFloat","sequenceStart","content","isLong","commentStart","lineStartComment","lineComment","push","level","terminator","consume","expect","id","isUnary","isCallExpression","isBlockFollow","createScope","destroyScope","scopeIdentifierName","scopeIdentifier","attachScope","scopeHasName","createLocationMarker","Marker","markLocation","pushLocation","marker","parseChunk","parseBlock","statement","block","parseStatement","parseLocalStatement","parseIfStatement","parseReturnStatement","parseFunctionName","parseFunctionDeclaration","parseWhileStatement","parseForStatement","parseRepeatStatement","parseBreakStatement","parseDoStatement","parseGotoStatement","parseLabelStatement","parseAssignmentOrCallStatement","parseIdentifier","parseExpectedExpression","expressions","parseExpression","l","validateVar","inParens","previous","parsePrefixExpression","exp","parameter","parsePrimaryExpression","parseTableConstructor","parseSubExpression","binaryPrecedence","minPrecedence","precedence","parseCallExpression","table","literals","_input","_options","undefined","write","substr"],"mappings":"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","file":"js/chunk-14720efb.524b27a0.js","sourcesContent":["const { isNull, isBoolean, isNumber, isString, isArray, isObject, isEmpty, fromPairs, keys, map, repeat } = require('lodash')\nconst { parse: parseLua } = require('luaparse')\n\nconst formatLuaString = (string, singleQuote) => (singleQuote ? `'${string.replace(/'/g, \"\\\\'\")}'` : `\"${string.replace(/\"/g, '\\\\\"')}\"`)\n\nconst valueKeys = { false: 'false', true: 'true', null: 'nil' }\n\nconst formatLuaKey = (string, singleQuote) =>\n  valueKeys[string] ? `[${valueKeys[string]}]` : string.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/) ? string : `[${formatLuaString(string, singleQuote)}]`\n\nconst format = (value, options = { eol: '\\n', singleQuote: true, spaces: 2 }) => {\n  options = options || {}\n  const eol = (options.eol = isString(options.eol) ? options.eol : '\\n')\n  options.singleQuote = isBoolean(options.singleQuote) ? options.singleQuote : true\n  options.spaces = isNull(options.spaces) || isNumber(options.spaces) || isString(options.spaces) ? options.spaces : 2\n\n  const rec = (value, i = 0) => {\n    if (isNull(value)) {\n      return 'nil'\n    }\n    if (isBoolean(value) || isNumber(value)) {\n      return value.toString()\n    }\n    if (isString(value)) {\n      return formatLuaString(value, options.singleQuote)\n    }\n    if (isArray(value)) {\n      if (isEmpty(value)) {\n        return '{}'\n      }\n      if (options.spaces) {\n        const spaces = isNumber(options.spaces) ? repeat(' ', options.spaces * (i + 1)) : repeat(options.spaces, i + 1)\n        const spacesEnd = isNumber(options.spaces) ? repeat(' ', options.spaces * i) : repeat(options.spaces, i)\n        return `{${eol}${value.map(e => `${spaces}${rec(e, i + 1)},`).join(eol)}${eol}${spacesEnd}}`\n      }\n      return `{${value.map(e => `${rec(e, i + 1)},`).join('')}}`\n    }\n    if (isObject(value)) {\n      if (isEmpty(value)) {\n        return '{}'\n      }\n      if (options.spaces) {\n        const spaces = isNumber(options.spaces) ? repeat(' ', options.spaces * (i + 1)) : repeat(options.spaces, i + 1)\n        const spacesEnd = isNumber(options.spaces) ? repeat(' ', options.spaces * i) : repeat(options.spaces, i)\n        return `{${eol}${keys(value)\n          .map(key => `${spaces}${formatLuaKey(key, options.singleQuote)} = ${rec(value[key], i + 1)},`)\n          .join(eol)}${eol}${spacesEnd}}`\n      }\n      return `{${keys(value)\n        .map(key => `${formatLuaKey(key, options.singleQuote)}=${rec(value[key], i + 1)},`)\n        .join('')}}`\n    }\n    throw new Error(`can't format ${typeof value}`)\n  }\n\n  return `return${options.spaces ? ' ' : ''}${rec(value)}`\n}\n\nconst luaAstToJson = ast => {\n  // literals\n  if (['NilLiteral', 'BooleanLiteral', 'NumericLiteral', 'StringLiteral'].includes(ast.type)) {\n    return ast.value\n  }\n  // basic expressions\n  if (ast.type === 'UnaryExpression' && ast.operator === '-') {\n    return -luaAstToJson(ast.argument)\n  }\n  if (ast.type === 'Identifier') {\n    return ast.name\n  }\n  // tables\n  if (['TableKey', 'TableKeyString'].includes(ast.type)) {\n    return { __internal_table_key: true, key: luaAstToJson(ast.key), value: luaAstToJson(ast.value) }\n  }\n  if (ast.type === 'TableValue') {\n    return luaAstToJson(ast.value)\n  }\n  if (ast.type === 'TableConstructorExpression') {\n    if (ast.fields[0] && ast.fields[0].key) {\n      const object = fromPairs(\n        map(ast.fields, field => {\n          const { key, value } = luaAstToJson(field)\n          return [key, value]\n        }),\n      )\n      return isEmpty(object) ? [] : object\n    }\n    return map(ast.fields, field => {\n      const value = luaAstToJson(field)\n      return value.__internal_table_key ? [value.key, value.value] : value\n    })\n  }\n  // top-level statements, only looking at the first statement, either return or local\n  // todo: filter until return or local?\n  if (ast.type === 'LocalStatement') {\n    const values = ast.init.map(luaAstToJson)\n    return values.length === 1 ? values[0] : values\n  }\n  if (ast.type === 'ReturnStatement') {\n    const values = ast.arguments.map(luaAstToJson)\n    return values.length === 1 ? values[0] : values\n  }\n  if (ast.type === 'Chunk') {\n    return luaAstToJson(ast.body[0])\n  }\n  throw new Error(`can't parse ${ast.type}`)\n}\n\nconst parse = value => luaAstToJson(parseLua(value, { comments: false }))\n\nmodule.exports = {\n  format,\n  parse,\n}\n","/* global exports:true, module:true, require:true, define:true, global:true */\n\n(function (root, name, factory) {\n  /* jshint eqeqeq:false */\n  'use strict';\n\n  // Used to determine if values are of the language type `Object`\n  var objectTypes = {\n        'function': true\n      , 'object': true\n    }\n    // Detect free variable `exports`\n    , freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports\n    // Detect free variable `module`\n    , freeModule = objectTypes[typeof module] && module && !module.nodeType && module\n    // Detect free variable `global`, from Node.js or Browserified code, and\n    // use it as `window`\n    , freeGlobal = freeExports && freeModule && typeof global == 'object' && global\n    // Detect the popular CommonJS extension `module.exports`\n    , moduleExports = freeModule && freeModule.exports === freeExports && freeExports;\n\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  // Some AMD build optimizers, like r.js, check for specific condition\n  // patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // defined as an anonymous module.\n    define(['exports'], factory);\n    // In case the source has been processed and wrapped in a define module use\n    // the supplied `exports` object.\n    if (freeExports && moduleExports) factory(freeModule.exports);\n  }\n  // check for `exports` after `define` in case a build optimizer adds an\n  // `exports` object\n  else if (freeExports && freeModule) {\n    // in Node.js or RingoJS v0.8.0+\n    if (moduleExports) factory(freeModule.exports);\n    // in Narwhal or RingoJS v0.7.0-\n    else factory(freeExports);\n  }\n  // in a browser or Rhino\n  else {\n    factory((root[name] = {}));\n  }\n}(this, 'luaparse', function (exports) {\n  'use strict';\n\n  exports.version = '0.2.1';\n\n  var input, options, length;\n\n  // Options can be set either globally on the parser object through\n  // defaultOptions, or during the parse call.\n  var defaultOptions = exports.defaultOptions = {\n    // Explicitly tell the parser when the input ends.\n      wait: false\n    // Store comments as an array in the chunk object.\n    , comments: true\n    // Track identifier scopes by adding an isLocal attribute to each\n    // identifier-node.\n    , scope: false\n    // Store location information on each syntax node as\n    // `loc: { start: { line, column }, end: { line, column } }`.\n    , locations: false\n    // Store the start and end character locations on each syntax node as\n    // `range: [start, end]`.\n    , ranges: false\n    // A callback which will be invoked when a syntax node has been completed.\n    // The node which has been created will be passed as the only parameter.\n    , onCreateNode: null\n    // A callback which will be invoked when a new scope is created.\n    , onCreateScope: null\n    // A callback which will be invoked when the current scope is destroyed.\n    , onDestroyScope: null\n  };\n\n  // The available tokens expressed as enum flags so they can be checked with\n  // bitwise operations.\n\n  var EOF = 1, StringLiteral = 2, Keyword = 4, Identifier = 8\n    , NumericLiteral = 16, Punctuator = 32, BooleanLiteral = 64\n    , NilLiteral = 128, VarargLiteral = 256;\n\n  exports.tokenTypes = { EOF: EOF, StringLiteral: StringLiteral\n    , Keyword: Keyword, Identifier: Identifier, NumericLiteral: NumericLiteral\n    , Punctuator: Punctuator, BooleanLiteral: BooleanLiteral\n    , NilLiteral: NilLiteral, VarargLiteral: VarargLiteral\n  };\n\n  // As this parser is a bit different from luas own, the error messages\n  // will be different in some situations.\n\n  var errors = exports.errors = {\n      unexpected: 'unexpected %1 \\'%2\\' near \\'%3\\''\n    , expected: '\\'%1\\' expected near \\'%2\\''\n    , expectedToken: '%1 expected near \\'%2\\''\n    , unfinishedString: 'unfinished string near \\'%1\\''\n    , malformedNumber: 'malformed number near \\'%1\\''\n    , invalidVar: 'invalid left-hand side of assignment near \\'%1\\''\n  };\n\n  // ### Abstract Syntax Tree\n  //\n  // The default AST structure is inspired by the Mozilla Parser API but can\n  // easily be customized by overriding these functions.\n\n  var ast = exports.ast = {\n      labelStatement: function(label) {\n      return {\n          type: 'LabelStatement'\n        , label: label\n      };\n    }\n\n    , breakStatement: function() {\n      return {\n          type: 'BreakStatement'\n      };\n    }\n\n    , gotoStatement: function(label) {\n      return {\n          type: 'GotoStatement'\n        , label: label\n      };\n    }\n\n    , returnStatement: function(args) {\n      return {\n          type: 'ReturnStatement'\n        , 'arguments': args\n      };\n    }\n\n    , ifStatement: function(clauses) {\n      return {\n          type: 'IfStatement'\n        , clauses: clauses\n      };\n    }\n    , ifClause: function(condition, body) {\n      return {\n          type: 'IfClause'\n        , condition: condition\n        , body: body\n      };\n    }\n    , elseifClause: function(condition, body) {\n      return {\n          type: 'ElseifClause'\n        , condition: condition\n        , body: body\n      };\n    }\n    , elseClause: function(body) {\n      return {\n          type: 'ElseClause'\n        , body: body\n      };\n    }\n\n    , whileStatement: function(condition, body) {\n      return {\n          type: 'WhileStatement'\n        , condition: condition\n        , body: body\n      };\n    }\n\n    , doStatement: function(body) {\n      return {\n          type: 'DoStatement'\n        , body: body\n      };\n    }\n\n    , repeatStatement: function(condition, body) {\n      return {\n          type: 'RepeatStatement'\n        , condition: condition\n        , body: body\n      };\n    }\n\n    , localStatement: function(variables, init) {\n      return {\n          type: 'LocalStatement'\n        , variables: variables\n        , init: init\n      };\n    }\n\n    , assignmentStatement: function(variables, init) {\n      return {\n          type: 'AssignmentStatement'\n        , variables: variables\n        , init: init\n      };\n    }\n\n    , callStatement: function(expression) {\n      return {\n          type: 'CallStatement'\n        , expression: expression\n      };\n    }\n\n    , functionStatement: function(identifier, parameters, isLocal, body) {\n      return {\n          type: 'FunctionDeclaration'\n        , identifier: identifier\n        , isLocal: isLocal\n        , parameters: parameters\n        , body: body\n      };\n    }\n\n    , forNumericStatement: function(variable, start, end, step, body) {\n      return {\n          type: 'ForNumericStatement'\n        , variable: variable\n        , start: start\n        , end: end\n        , step: step\n        , body: body\n      };\n    }\n\n    , forGenericStatement: function(variables, iterators, body) {\n      return {\n          type: 'ForGenericStatement'\n        , variables: variables\n        , iterators: iterators\n        , body: body\n      };\n    }\n\n    , chunk: function(body) {\n      return {\n          type: 'Chunk'\n        , body: body\n      };\n    }\n\n    , identifier: function(name) {\n      return {\n          type: 'Identifier'\n        , name: name\n      };\n    }\n\n    , literal: function(type, value, raw) {\n      type = (type === StringLiteral) ? 'StringLiteral'\n        : (type === NumericLiteral) ? 'NumericLiteral'\n        : (type === BooleanLiteral) ? 'BooleanLiteral'\n        : (type === NilLiteral) ? 'NilLiteral'\n        : 'VarargLiteral';\n\n      return {\n          type: type\n        , value: value\n        , raw: raw\n      };\n    }\n\n    , tableKey: function(key, value) {\n      return {\n          type: 'TableKey'\n        , key: key\n        , value: value\n      };\n    }\n    , tableKeyString: function(key, value) {\n      return {\n          type: 'TableKeyString'\n        , key: key\n        , value: value\n      };\n    }\n    , tableValue: function(value) {\n      return {\n          type: 'TableValue'\n        , value: value\n      };\n    }\n\n\n    , tableConstructorExpression: function(fields) {\n      return {\n          type: 'TableConstructorExpression'\n        , fields: fields\n      };\n    }\n    , binaryExpression: function(operator, left, right) {\n      var type = ('and' === operator || 'or' === operator) ?\n        'LogicalExpression' :\n        'BinaryExpression';\n\n      return {\n          type: type\n        , operator: operator\n        , left: left\n        , right: right\n      };\n    }\n    , unaryExpression: function(operator, argument) {\n      return {\n          type: 'UnaryExpression'\n        , operator: operator\n        , argument: argument\n      };\n    }\n    , memberExpression: function(base, indexer, identifier) {\n      return {\n          type: 'MemberExpression'\n        , indexer: indexer\n        , identifier: identifier\n        , base: base\n      };\n    }\n\n    , indexExpression: function(base, index) {\n      return {\n          type: 'IndexExpression'\n        , base: base\n        , index: index\n      };\n    }\n\n    , callExpression: function(base, args) {\n      return {\n          type: 'CallExpression'\n        , base: base\n        , 'arguments': args\n      };\n    }\n\n    , tableCallExpression: function(base, args) {\n      return {\n          type: 'TableCallExpression'\n        , base: base\n        , 'arguments': args\n      };\n    }\n\n    , stringCallExpression: function(base, argument) {\n      return {\n          type: 'StringCallExpression'\n        , base: base\n        , argument: argument\n      };\n    }\n\n    , comment: function(value, raw) {\n      return {\n          type: 'Comment'\n        , value: value\n        , raw: raw\n      };\n    }\n  };\n\n  // Wrap up the node object.\n\n  function finishNode(node) {\n    // Pop a `Marker` off the location-array and attach its location data.\n    if (trackLocations) {\n      var location = locations.pop();\n      location.complete();\n      if (options.locations) node.loc = location.loc;\n      if (options.ranges) node.range = location.range;\n    }\n    if (options.onCreateNode) options.onCreateNode(node);\n    return node;\n  }\n\n\n  // Helpers\n  // -------\n\n  var slice = Array.prototype.slice\n    , toString = Object.prototype.toString\n    , indexOf = function indexOf(array, element) {\n      for (var i = 0, length = array.length; i < length; i++) {\n        if (array[i] === element) return i;\n      }\n      return -1;\n    };\n\n  // Iterate through an array of objects and return the index of an object\n  // with a matching property.\n\n  function indexOfObject(array, property, element) {\n    for (var i = 0, length = array.length; i < length; i++) {\n      if (array[i][property] === element) return i;\n    }\n    return -1;\n  }\n\n  // A sprintf implementation using %index (beginning at 1) to input\n  // arguments in the format string.\n  //\n  // Example:\n  //\n  //     // Unexpected function in token\n  //     sprintf('Unexpected %2 in %1.', 'token', 'function');\n\n  function sprintf(format) {\n    var args = slice.call(arguments, 1);\n    format = format.replace(/%(\\d)/g, function (match, index) {\n      return '' + args[index - 1] || '';\n    });\n    return format;\n  }\n\n  // Returns a new object with the properties from all objectes passed as\n  // arguments. Last argument takes precedence.\n  //\n  // Example:\n  //\n  //     this.options = extend(options, { output: false });\n\n  function extend() {\n    var args = slice.call(arguments)\n      , dest = {}\n      , src, prop;\n\n    for (var i = 0, length = args.length; i < length; i++) {\n      src = args[i];\n      for (prop in src) if (src.hasOwnProperty(prop)) {\n        dest[prop] = src[prop];\n      }\n    }\n    return dest;\n  }\n\n  // ### Error functions\n\n  // #### Raise an exception.\n  //\n  // Raise an exception by passing a token, a string format and its paramters.\n  //\n  // The passed tokens location will automatically be added to the error\n  // message if it exists, if not it will default to the lexers current\n  // position.\n  //\n  // Example:\n  //\n  //     // [1:0] expected [ near (\n  //     raise(token, \"expected %1 near %2\", '[', token.value);\n\n  function raise(token) {\n    var message = sprintf.apply(null, slice.call(arguments, 1))\n      , error, col;\n\n    if ('undefined' !== typeof token.line) {\n      col = token.range[0] - token.lineStart;\n      error = new SyntaxError(sprintf('[%1:%2] %3', token.line, col, message));\n      error.line = token.line;\n      error.index = token.range[0];\n      error.column = col;\n    } else {\n      col = index - lineStart + 1;\n      error = new SyntaxError(sprintf('[%1:%2] %3', line, col, message));\n      error.index = index;\n      error.line = line;\n      error.column = col;\n    }\n    throw error;\n  }\n\n  // #### Raise an unexpected token error.\n  //\n  // Example:\n  //\n  //     // expected <name> near '0'\n  //     raiseUnexpectedToken('<name>', token);\n\n  function raiseUnexpectedToken(type, token) {\n    raise(token, errors.expectedToken, type, token.value);\n  }\n\n  // #### Raise a general unexpected error\n  //\n  // Usage should pass either a token object or a symbol string which was\n  // expected. We can also specify a nearby token such as <eof>, this will\n  // default to the currently active token.\n  //\n  // Example:\n  //\n  //     // Unexpected symbol 'end' near '<eof>'\n  //     unexpected(token);\n  //\n  // If there's no token in the buffer it means we have reached <eof>.\n\n  function unexpected(found, near) {\n    if ('undefined' === typeof near) near = lookahead.value;\n    if ('undefined' !== typeof found.type) {\n      var type;\n      switch (found.type) {\n        case StringLiteral:   type = 'string';      break;\n        case Keyword:         type = 'keyword';     break;\n        case Identifier:      type = 'identifier';  break;\n        case NumericLiteral:  type = 'number';      break;\n        case Punctuator:      type = 'symbol';      break;\n        case BooleanLiteral:  type = 'boolean';     break;\n        case NilLiteral:\n          return raise(found, errors.unexpected, 'symbol', 'nil', near);\n      }\n      return raise(found, errors.unexpected, type, found.value, near);\n    }\n    return raise(found, errors.unexpected, 'symbol', found, near);\n  }\n\n  // Lexer\n  // -----\n  //\n  // The lexer, or the tokenizer reads the input string character by character\n  // and derives a token left-right. To be as efficient as possible the lexer\n  // prioritizes the common cases such as identifiers. It also works with\n  // character codes instead of characters as string comparisons was the\n  // biggest bottleneck of the parser.\n  //\n  // If `options.comments` is enabled, all comments encountered will be stored\n  // in an array which later will be appended to the chunk object. If disabled,\n  // they will simply be disregarded.\n  //\n  // When the lexer has derived a valid token, it will be returned as an object\n  // containing its value and as well as its position in the input string (this\n  // is always enabled to provide proper debug messages).\n  //\n  // `lex()` starts lexing and returns the following token in the stream.\n\n  var index\n    , token\n    , previousToken\n    , lookahead\n    , comments\n    , tokenStart\n    , line\n    , lineStart;\n\n  exports.lex = lex;\n\n  function lex() {\n    skipWhiteSpace();\n\n    // Skip comments beginning with --\n    while (45 === input.charCodeAt(index) &&\n           45 === input.charCodeAt(index + 1)) {\n      scanComment();\n      skipWhiteSpace();\n    }\n    if (index >= length) return {\n        type : EOF\n      , value: '<eof>'\n      , line: line\n      , lineStart: lineStart\n      , range: [index, index]\n    };\n\n    var charCode = input.charCodeAt(index)\n      , next = input.charCodeAt(index + 1);\n\n    // Memorize the range index where the token begins.\n    tokenStart = index;\n    if (isIdentifierStart(charCode)) return scanIdentifierOrKeyword();\n\n    switch (charCode) {\n      case 39: case 34: // '\"\n        return scanStringLiteral();\n\n      // 0-9\n      case 48: case 49: case 50: case 51: case 52: case 53:\n      case 54: case 55: case 56: case 57:\n        return scanNumericLiteral();\n\n      case 46: // .\n        // If the dot is followed by a digit it's a float.\n        if (isDecDigit(next)) return scanNumericLiteral();\n        if (46 === next) {\n          if (46 === input.charCodeAt(index + 2)) return scanVarargLiteral();\n          return scanPunctuator('..');\n        }\n        return scanPunctuator('.');\n\n      case 61: // =\n        if (61 === next) return scanPunctuator('==');\n        return scanPunctuator('=');\n\n      case 62: // >\n        if (61 === next) return scanPunctuator('>=');\n        if (62 === next) return scanPunctuator('>>');\n        return scanPunctuator('>');\n\n      case 60: // <\n        if (60 === next) return scanPunctuator('<<');\n        if (61 === next) return scanPunctuator('<=');\n        return scanPunctuator('<');\n\n      case 126: // ~\n        if (61 === next) return scanPunctuator('~=');\n        return scanPunctuator('~');\n\n      case 58: // :\n        if (58 === next) return scanPunctuator('::');\n        return scanPunctuator(':');\n\n      case 91: // [\n        // Check for a multiline string, they begin with [= or [[\n        if (91 === next || 61 === next) return scanLongStringLiteral();\n        return scanPunctuator('[');\n\n      case 47: // /\n        // Check for integer division op (//)\n        if (47 === next) return scanPunctuator('//');\n        return scanPunctuator('/');\n\n      // * ^ % , { } ] ( ) ; & # - + |\n      case 42: case 94: case 37: case 44: case 123: case 124: case 125:\n      case 93: case 40: case 41: case 59: case 38: case 35: case 45: case 43:\n        return scanPunctuator(input.charAt(index));\n    }\n\n    return unexpected(input.charAt(index));\n  }\n\n  // Whitespace has no semantic meaning in lua so simply skip ahead while\n  // tracking the encounted newlines. Any kind of eol sequence is counted as a\n  // single line.\n\n  function consumeEOL() {\n    var charCode = input.charCodeAt(index)\n      , peekCharCode = input.charCodeAt(index + 1);\n\n    if (isLineTerminator(charCode)) {\n      // Count \\n\\r and \\r\\n as one newline.\n      if (10 === charCode && 13 === peekCharCode) index++;\n      if (13 === charCode && 10 === peekCharCode) index++;\n      line++;\n      lineStart = ++index;\n\n      return true;\n    }\n    return false;\n  }\n\n  function skipWhiteSpace() {\n    while (index < length) {\n      var charCode = input.charCodeAt(index);\n      if (isWhiteSpace(charCode)) {\n        index++;\n      } else if (!consumeEOL()) {\n        break;\n      }\n    }\n  }\n\n  // Identifiers, keywords, booleans and nil all look the same syntax wise. We\n  // simply go through them one by one and defaulting to an identifier if no\n  // previous case matched.\n\n  function scanIdentifierOrKeyword() {\n    var value, type;\n\n    // Slicing the input string is prefered before string concatenation in a\n    // loop for performance reasons.\n    while (isIdentifierPart(input.charCodeAt(++index)));\n    value = input.slice(tokenStart, index);\n\n    // Decide on the token type and possibly cast the value.\n    if (isKeyword(value)) {\n      type = Keyword;\n    } else if ('true' === value || 'false' === value) {\n      type = BooleanLiteral;\n      value = ('true' === value);\n    } else if ('nil' === value) {\n      type = NilLiteral;\n      value = null;\n    } else {\n      type = Identifier;\n    }\n\n    return {\n        type: type\n      , value: value\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Once a punctuator reaches this function it should already have been\n  // validated so we simply return it as a token.\n\n  function scanPunctuator(value) {\n    index += value.length;\n    return {\n        type: Punctuator\n      , value: value\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // A vararg literal consists of three dots.\n\n  function scanVarargLiteral() {\n    index += 3;\n    return {\n        type: VarargLiteral\n      , value: '...'\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Find the string literal by matching the delimiter marks used.\n\n  function scanStringLiteral() {\n    var delimiter = input.charCodeAt(index++)\n      , stringStart = index\n      , string = ''\n      , charCode;\n\n    while (index < length) {\n      charCode = input.charCodeAt(index++);\n      if (delimiter === charCode) break;\n      if (92 === charCode) { // \\\n        string += input.slice(stringStart, index - 1) + readEscapeSequence();\n        stringStart = index;\n      }\n      // EOF or `\\n` terminates a string literal. If we haven't found the\n      // ending delimiter by now, raise an exception.\n      else if (index >= length || isLineTerminator(charCode)) {\n        string += input.slice(stringStart, index - 1);\n        raise({}, errors.unfinishedString, string + String.fromCharCode(charCode));\n      }\n    }\n    string += input.slice(stringStart, index - 1);\n\n    return {\n        type: StringLiteral\n      , value: string\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Expect a multiline string literal and return it as a regular string\n  // literal, if it doesn't validate into a valid multiline string, throw an\n  // exception.\n\n  function scanLongStringLiteral() {\n    var string = readLongString();\n    // Fail if it's not a multiline literal.\n    if (false === string) raise(token, errors.expected, '[', token.value);\n\n    return {\n        type: StringLiteral\n      , value: string\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Numeric literals will be returned as floating-point numbers instead of\n  // strings. The raw value should be retrieved from slicing the input string\n  // later on in the process.\n  //\n  // If a hexadecimal number is encountered, it will be converted.\n\n  function scanNumericLiteral() {\n    var character = input.charAt(index)\n      , next = input.charAt(index + 1);\n\n    var value = ('0' === character && 'xX'.indexOf(next || null) >= 0) ?\n      readHexLiteral() : readDecLiteral();\n\n    return {\n        type: NumericLiteral\n      , value: value\n      , line: line\n      , lineStart: lineStart\n      , range: [tokenStart, index]\n    };\n  }\n\n  // Lua hexadecimals have an optional fraction part and an optional binary\n  // exoponent part. These are not included in JavaScript so we will compute\n  // all three parts separately and then sum them up at the end of the function\n  // with the following algorithm.\n  //\n  //     Digit := toDec(digit)\n  //     Fraction := toDec(fraction) / 16 ^ fractionCount\n  //     BinaryExp := 2 ^ binaryExp\n  //     Number := ( Digit + Fraction ) * BinaryExp\n\n  function readHexLiteral() {\n    var fraction = 0 // defaults to 0 as it gets summed\n      , binaryExponent = 1 // defaults to 1 as it gets multiplied\n      , binarySign = 1 // positive\n      , digit, fractionStart, exponentStart, digitStart;\n\n    digitStart = index += 2; // Skip 0x part\n\n    // A minimum of one hex digit is required.\n    if (!isHexDigit(input.charCodeAt(index)))\n      raise({}, errors.malformedNumber, input.slice(tokenStart, index));\n\n    while (isHexDigit(input.charCodeAt(index))) index++;\n    // Convert the hexadecimal digit to base 10.\n    digit = parseInt(input.slice(digitStart, index), 16);\n\n    // Fraction part i optional.\n    if ('.' === input.charAt(index)) {\n      fractionStart = ++index;\n\n      while (isHexDigit(input.charCodeAt(index))) index++;\n      fraction = input.slice(fractionStart, index);\n\n      // Empty fraction parts should default to 0, others should be converted\n      // 0.x form so we can use summation at the end.\n      fraction = (fractionStart === index) ? 0\n        : parseInt(fraction, 16) / Math.pow(16, index - fractionStart);\n    }\n\n    // Binary exponents are optional\n    if ('pP'.indexOf(input.charAt(index) || null) >= 0) {\n      index++;\n\n      // Sign part is optional and defaults to 1 (positive).\n      if ('+-'.indexOf(input.charAt(index) || null) >= 0)\n        binarySign = ('+' === input.charAt(index++)) ? 1 : -1;\n\n      exponentStart = index;\n\n      // The binary exponent sign requires a decimal digit.\n      if (!isDecDigit(input.charCodeAt(index)))\n        raise({}, errors.malformedNumber, input.slice(tokenStart, index));\n\n      while (isDecDigit(input.charCodeAt(index))) index++;\n      binaryExponent = input.slice(exponentStart, index);\n\n      // Calculate the binary exponent of the number.\n      binaryExponent = Math.pow(2, binaryExponent * binarySign);\n    }\n\n    return (digit + fraction) * binaryExponent;\n  }\n\n  // Decimal numbers are exactly the same in Lua and in JavaScript, because of\n  // this we check where the token ends and then parse it with native\n  // functions.\n\n  function readDecLiteral() {\n    while (isDecDigit(input.charCodeAt(index))) index++;\n    // Fraction part is optional\n    if ('.' === input.charAt(index)) {\n      index++;\n      // Fraction part defaults to 0\n      while (isDecDigit(input.charCodeAt(index))) index++;\n    }\n    // Exponent part is optional.\n    if ('eE'.indexOf(input.charAt(index) || null) >= 0) {\n      index++;\n      // Sign part is optional.\n      if ('+-'.indexOf(input.charAt(index) || null) >= 0) index++;\n      // An exponent is required to contain at least one decimal digit.\n      if (!isDecDigit(input.charCodeAt(index)))\n        raise({}, errors.malformedNumber, input.slice(tokenStart, index));\n\n      while (isDecDigit(input.charCodeAt(index))) index++;\n    }\n\n    return parseFloat(input.slice(tokenStart, index));\n  }\n\n\n  // Translate escape sequences to the actual characters.\n\n  function readEscapeSequence() {\n    var sequenceStart = index;\n    switch (input.charAt(index)) {\n      // Lua allow the following escape sequences.\n      // We don't escape the bell sequence.\n      case 'n': index++; return '\\n';\n      case 'r': index++; return '\\r';\n      case 't': index++; return '\\t';\n      case 'v': index++; return '\\x0B';\n      case 'b': index++; return '\\b';\n      case 'f': index++; return '\\f';\n      // Skips the following span of white-space.\n      case 'z': index++; skipWhiteSpace(); return '';\n      // Byte representation should for now be returned as is.\n      case 'x':\n        // \\xXX, where XX is a sequence of exactly two hexadecimal digits\n        if (isHexDigit(input.charCodeAt(index + 1)) &&\n            isHexDigit(input.charCodeAt(index + 2))) {\n          index += 3;\n          // Return it as is, without translating the byte.\n          return '\\\\' + input.slice(sequenceStart, index);\n        }\n        return '\\\\' + input.charAt(index++);\n      default:\n        // \\ddd, where ddd is a sequence of up to three decimal digits.\n        if (isDecDigit(input.charCodeAt(index))) {\n          while (isDecDigit(input.charCodeAt(++index)));\n          return '\\\\' + input.slice(sequenceStart, index);\n        }\n        // Simply return the \\ as is, it's not escaping any sequence.\n        return input.charAt(index++);\n    }\n  }\n\n  // Comments begin with -- after which it will be decided if they are\n  // multiline comments or not.\n  //\n  // The multiline functionality works the exact same way as with string\n  // literals so we reuse the functionality.\n\n  function scanComment() {\n    tokenStart = index;\n    index += 2; // --\n\n    var character = input.charAt(index)\n      , content = ''\n      , isLong = false\n      , commentStart = index\n      , lineStartComment = lineStart\n      , lineComment = line;\n\n    if ('[' === character) {\n      content = readLongString();\n      // This wasn't a multiline comment after all.\n      if (false === content) content = character;\n      else isLong = true;\n    }\n    // Scan until next line as long as it's not a multiline comment.\n    if (!isLong) {\n      while (index < length) {\n        if (isLineTerminator(input.charCodeAt(index))) break;\n        index++;\n      }\n      if (options.comments) content = input.slice(commentStart, index);\n    }\n\n    if (options.comments) {\n      var node = ast.comment(content, input.slice(tokenStart, index));\n\n      // `Marker`s depend on tokens available in the parser and as comments are\n      // intercepted in the lexer all location data is set manually.\n      if (options.locations) {\n        node.loc = {\n            start: { line: lineComment, column: tokenStart - lineStartComment }\n          , end: { line: line, column: index - lineStart }\n        };\n      }\n      if (options.ranges) {\n        node.range = [tokenStart, index];\n      }\n      if (options.onCreateNode) options.onCreateNode(node);\n      comments.push(node);\n    }\n  }\n\n  // Read a multiline string by calculating the depth of `=` characters and\n  // then appending until an equal depth is found.\n\n  function readLongString() {\n    var level = 0\n      , content = ''\n      , terminator = false\n      , character, stringStart;\n\n    index++; // [\n\n    // Calculate the depth of the comment.\n    while ('=' === input.charAt(index + level)) level++;\n    // Exit, this is not a long string afterall.\n    if ('[' !== input.charAt(index + level)) return false;\n\n    index += level + 1;\n\n    // If the first character is a newline, ignore it and begin on next line.\n    if (isLineTerminator(input.charCodeAt(index))) consumeEOL();\n\n    stringStart = index;\n    while (index < length) {\n      // To keep track of line numbers run the `consumeEOL()` which increments\n      // its counter.\n      if (isLineTerminator(input.charCodeAt(index))) consumeEOL();\n\n      character = input.charAt(index++);\n\n      // Once the delimiter is found, iterate through the depth count and see\n      // if it matches.\n      if (']' === character) {\n        terminator = true;\n        for (var i = 0; i < level; i++) {\n          if ('=' !== input.charAt(index + i)) terminator = false;\n        }\n        if (']' !== input.charAt(index + level)) terminator = false;\n      }\n\n      // We reached the end of the multiline string. Get out now.\n      if (terminator) break;\n    }\n    content += input.slice(stringStart, index - 1);\n    index += level + 1;\n\n    return content;\n  }\n\n  // ## Lex functions and helpers.\n\n  // Read the next token.\n  //\n  // This is actually done by setting the current token to the lookahead and\n  // reading in the new lookahead token.\n\n  function next() {\n    previousToken = token;\n    token = lookahead;\n    lookahead = lex();\n  }\n\n  // Consume a token if its value matches. Once consumed or not, return the\n  // success of the operation.\n\n  function consume(value) {\n    if (value === token.value) {\n      next();\n      return true;\n    }\n    return false;\n  }\n\n  // Expect the next token value to match. If not, throw an exception.\n\n  function expect(value) {\n    if (value === token.value) next();\n    else raise(token, errors.expected, value, token.value);\n  }\n\n  // ### Validation functions\n\n  function isWhiteSpace(charCode) {\n    return 9 === charCode || 32 === charCode || 0xB === charCode || 0xC === charCode;\n  }\n\n  function isLineTerminator(charCode) {\n    return 10 === charCode || 13 === charCode;\n  }\n\n  function isDecDigit(charCode) {\n    return charCode >= 48 && charCode <= 57;\n  }\n\n  function isHexDigit(charCode) {\n    return (charCode >= 48 && charCode <= 57) || (charCode >= 97 && charCode <= 102) || (charCode >= 65 && charCode <= 70);\n  }\n\n  // From [Lua 5.2](http://www.lua.org/manual/5.2/manual.html#8.1) onwards\n  // identifiers cannot use locale-dependet letters.\n\n  function isIdentifierStart(charCode) {\n    return (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) || 95 === charCode;\n  }\n\n  function isIdentifierPart(charCode) {\n    return (charCode >= 65 && charCode <= 90) || (charCode >= 97 && charCode <= 122) || 95 === charCode || (charCode >= 48 && charCode <= 57);\n  }\n\n  // [3.1 Lexical Conventions](http://www.lua.org/manual/5.2/manual.html#3.1)\n  //\n  // `true`, `false` and `nil` will not be considered keywords, but literals.\n\n  function isKeyword(id) {\n    switch (id.length) {\n      case 2:\n        return 'do' === id || 'if' === id || 'in' === id || 'or' === id;\n      case 3:\n        return 'and' === id || 'end' === id || 'for' === id || 'not' === id;\n      case 4:\n        return 'else' === id || 'goto' === id || 'then' === id;\n      case 5:\n        return 'break' === id || 'local' === id || 'until' === id || 'while' === id;\n      case 6:\n        return 'elseif' === id || 'repeat' === id || 'return' === id;\n      case 8:\n        return 'function' === id;\n    }\n    return false;\n  }\n\n  function isUnary(token) {\n    if (Punctuator === token.type) return '#-~'.indexOf(token.value) >= 0;\n    if (Keyword === token.type) return 'not' === token.value;\n    return false;\n  }\n\n  // @TODO this needs to be rethought.\n  function isCallExpression(expression) {\n    switch (expression.type) {\n      case 'CallExpression':\n      case 'TableCallExpression':\n      case 'StringCallExpression':\n        return true;\n    }\n    return false;\n  }\n\n  // Check if the token syntactically closes a block.\n\n  function isBlockFollow(token) {\n    if (EOF === token.type) return true;\n    if (Keyword !== token.type) return false;\n    switch (token.value) {\n      case 'else': case 'elseif':\n      case 'end': case 'until':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Scope\n  // -----\n\n  // Store each block scope as a an array of identifier names. Each scope is\n  // stored in an FILO-array.\n  var scopes\n    // The current scope index\n    , scopeDepth\n    // A list of all global identifier nodes.\n    , globals;\n\n  // Create a new scope inheriting all declarations from the previous scope.\n  function createScope() {\n    var scope = Array.apply(null, scopes[scopeDepth++]);\n    scopes.push(scope);\n    if (options.onCreateScope) options.onCreateScope();\n  }\n\n  // Exit and remove the current scope.\n  function destroyScope() {\n    var scope = scopes.pop();\n    scopeDepth--;\n    if (options.onDestroyScope) options.onDestroyScope();\n  }\n\n  // Add identifier name to the current scope if it doesnt already exist.\n  function scopeIdentifierName(name) {\n    if (-1 !== indexOf(scopes[scopeDepth], name)) return;\n    scopes[scopeDepth].push(name);\n  }\n\n  // Add identifier to the current scope\n  function scopeIdentifier(node) {\n    scopeIdentifierName(node.name);\n    attachScope(node, true);\n  }\n\n  // Attach scope information to node. If the node is global, store it in the\n  // globals array so we can return the information to the user.\n  function attachScope(node, isLocal) {\n    if (!isLocal && -1 === indexOfObject(globals, 'name', node.name))\n      globals.push(node);\n\n    node.isLocal = isLocal;\n  }\n\n  // Is the identifier name available in this scope.\n  function scopeHasName(name) {\n    return (-1 !== indexOf(scopes[scopeDepth], name));\n  }\n\n  // Location tracking\n  // -----------------\n  //\n  // Locations are stored in FILO-array as a `Marker` object consisting of both\n  // `loc` and `range` data. Once a `Marker` is popped off the list an end\n  // location is added and the data is attached to a syntax node.\n\n  var locations = []\n    , trackLocations;\n\n  function createLocationMarker() {\n    return new Marker(token);\n  }\n\n  function Marker(token) {\n    if (options.locations) {\n      this.loc = {\n          start: {\n            line: token.line\n          , column: token.range[0] - token.lineStart\n        }\n        , end: {\n            line: 0\n          , column: 0\n        }\n      };\n    }\n    if (options.ranges) this.range = [token.range[0], 0];\n  }\n\n  // Complete the location data stored in the `Marker` by adding the location\n  // of the *previous token* as an end location.\n  Marker.prototype.complete = function() {\n    if (options.locations) {\n      this.loc.end.line = previousToken.line;\n      this.loc.end.column = previousToken.range[1] - previousToken.lineStart;\n    }\n    if (options.ranges) {\n      this.range[1] = previousToken.range[1];\n    }\n  };\n\n  // Create a new `Marker` and add it to the FILO-array.\n  function markLocation() {\n    if (trackLocations) locations.push(createLocationMarker());\n  }\n\n  // Push an arbitrary `Marker` object onto the FILO-array.\n  function pushLocation(marker) {\n    if (trackLocations) locations.push(marker);\n  }\n\n  // Parse functions\n  // ---------------\n\n  // Chunk is the main program object. Syntactically it's the same as a block.\n  //\n  //     chunk ::= block\n\n  function parseChunk() {\n    next();\n    markLocation();\n    if (options.scope) createScope();\n    var body = parseBlock();\n    if (options.scope) destroyScope();\n    if (EOF !== token.type) unexpected(token);\n    // If the body is empty no previousToken exists when finishNode runs.\n    if (trackLocations && !body.length) previousToken = token;\n    return finishNode(ast.chunk(body));\n  }\n\n  // A block contains a list of statements with an optional return statement\n  // as its last statement.\n  //\n  //     block ::= {stat} [retstat]\n\n  function parseBlock(terminator) {\n    var block = []\n      , statement;\n\n    while (!isBlockFollow(token)) {\n      // Return has to be the last statement in a block.\n      if ('return' === token.value) {\n        block.push(parseStatement());\n        break;\n      }\n      statement = parseStatement();\n      // Statements are only added if they are returned, this allows us to\n      // ignore some statements, such as EmptyStatement.\n      if (statement) block.push(statement);\n    }\n\n    // Doesn't really need an ast node\n    return block;\n  }\n\n  // There are two types of statements, simple and compound.\n  //\n  //     statement ::= break | goto | do | while | repeat | return\n  //          | if | for | function | local | label | assignment\n  //          | functioncall | ';'\n\n  function parseStatement() {\n    markLocation();\n    if (Keyword === token.type) {\n      switch (token.value) {\n        case 'local':    next(); return parseLocalStatement();\n        case 'if':       next(); return parseIfStatement();\n        case 'return':   next(); return parseReturnStatement();\n        case 'function': next();\n          var name = parseFunctionName();\n          return parseFunctionDeclaration(name);\n        case 'while':    next(); return parseWhileStatement();\n        case 'for':      next(); return parseForStatement();\n        case 'repeat':   next(); return parseRepeatStatement();\n        case 'break':    next(); return parseBreakStatement();\n        case 'do':       next(); return parseDoStatement();\n        case 'goto':     next(); return parseGotoStatement();\n      }\n    }\n\n    if (Punctuator === token.type) {\n      if (consume('::')) return parseLabelStatement();\n    }\n    // Assignments memorizes the location and pushes it manually for wrapper\n    // nodes. Additionally empty `;` statements should not mark a location.\n    if (trackLocations) locations.pop();\n\n    // When a `;` is encounted, simply eat it without storing it.\n    if (consume(';')) return;\n\n    return parseAssignmentOrCallStatement();\n  }\n\n  // ## Statements\n\n  //     label ::= '::' Name '::'\n\n  function parseLabelStatement() {\n    var name = token.value\n      , label = parseIdentifier();\n\n    if (options.scope) {\n      scopeIdentifierName('::' + name + '::');\n      attachScope(label, true);\n    }\n\n    expect('::');\n    return finishNode(ast.labelStatement(label));\n  }\n\n  //     break ::= 'break'\n\n  function parseBreakStatement() {\n    return finishNode(ast.breakStatement());\n  }\n\n  //     goto ::= 'goto' Name\n\n  function parseGotoStatement() {\n    var name = token.value\n      , label = parseIdentifier();\n\n    return finishNode(ast.gotoStatement(label));\n  }\n\n  //     do ::= 'do' block 'end'\n\n  function parseDoStatement() {\n    if (options.scope) createScope();\n    var body = parseBlock();\n    if (options.scope) destroyScope();\n    expect('end');\n    return finishNode(ast.doStatement(body));\n  }\n\n  //     while ::= 'while' exp 'do' block 'end'\n\n  function parseWhileStatement() {\n    var condition = parseExpectedExpression();\n    expect('do');\n    if (options.scope) createScope();\n    var body = parseBlock();\n    if (options.scope) destroyScope();\n    expect('end');\n    return finishNode(ast.whileStatement(condition, body));\n  }\n\n  //     repeat ::= 'repeat' block 'until' exp\n\n  function parseRepeatStatement() {\n    if (options.scope) createScope();\n    var body = parseBlock();\n    expect('until');\n    var condition = parseExpectedExpression();\n    if (options.scope) destroyScope();\n    return finishNode(ast.repeatStatement(condition, body));\n  }\n\n  //     retstat ::= 'return' [exp {',' exp}] [';']\n\n  function parseReturnStatement() {\n    var expressions = [];\n\n    if ('end' !== token.value) {\n      var expression = parseExpression();\n      if (null != expression) expressions.push(expression);\n      while (consume(',')) {\n        expression = parseExpectedExpression();\n        expressions.push(expression);\n      }\n      consume(';'); // grammar tells us ; is optional here.\n    }\n    return finishNode(ast.returnStatement(expressions));\n  }\n\n  //     if ::= 'if' exp 'then' block {elif} ['else' block] 'end'\n  //     elif ::= 'elseif' exp 'then' block\n\n  function parseIfStatement() {\n    var clauses = []\n      , condition\n      , body\n      , marker;\n\n    // IfClauses begin at the same location as the parent IfStatement.\n    // It ends at the start of `end`, `else`, or `elseif`.\n    if (trackLocations) {\n      marker = locations[locations.length - 1];\n      locations.push(marker);\n    }\n    condition = parseExpectedExpression();\n    expect('then');\n    if (options.scope) createScope();\n    body = parseBlock();\n    if (options.scope) destroyScope();\n    clauses.push(finishNode(ast.ifClause(condition, body)));\n\n    if (trackLocations) marker = createLocationMarker();\n    while (consume('elseif')) {\n      pushLocation(marker);\n      condition = parseExpectedExpression();\n      expect('then');\n      if (options.scope) createScope();\n      body = parseBlock();\n      if (options.scope) destroyScope();\n      clauses.push(finishNode(ast.elseifClause(condition, body)));\n      if (trackLocations) marker = createLocationMarker();\n    }\n\n    if (consume('else')) {\n      // Include the `else` in the location of ElseClause.\n      if (trackLocations) {\n        marker = new Marker(previousToken);\n        locations.push(marker);\n      }\n      if (options.scope) createScope();\n      body = parseBlock();\n      if (options.scope) destroyScope();\n      clauses.push(finishNode(ast.elseClause(body)));\n    }\n\n    expect('end');\n    return finishNode(ast.ifStatement(clauses));\n  }\n\n  // There are two types of for statements, generic and numeric.\n  //\n  //     for ::= Name '=' exp ',' exp [',' exp] 'do' block 'end'\n  //     for ::= namelist 'in' explist 'do' block 'end'\n  //     namelist ::= Name {',' Name}\n  //     explist ::= exp {',' exp}\n\n  function parseForStatement() {\n    var variable = parseIdentifier()\n      , body;\n\n    // The start-identifier is local.\n\n    if (options.scope) {\n      createScope();\n      scopeIdentifier(variable);\n    }\n\n    // If the first expression is followed by a `=` punctuator, this is a\n    // Numeric For Statement.\n    if (consume('=')) {\n      // Start expression\n      var start = parseExpectedExpression();\n      expect(',');\n      // End expression\n      var end = parseExpectedExpression();\n      // Optional step expression\n      var step = consume(',') ? parseExpectedExpression() : null;\n\n      expect('do');\n      body = parseBlock();\n      expect('end');\n      if (options.scope) destroyScope();\n\n      return finishNode(ast.forNumericStatement(variable, start, end, step, body));\n    }\n    // If not, it's a Generic For Statement\n    else {\n      // The namelist can contain one or more identifiers.\n      var variables = [variable];\n      while (consume(',')) {\n        variable = parseIdentifier();\n        // Each variable in the namelist is locally scoped.\n        if (options.scope) scopeIdentifier(variable);\n        variables.push(variable);\n      }\n      expect('in');\n      var iterators = [];\n\n      // One or more expressions in the explist.\n      do {\n        var expression = parseExpectedExpression();\n        iterators.push(expression);\n      } while (consume(','));\n\n      expect('do');\n      body = parseBlock();\n      expect('end');\n      if (options.scope) destroyScope();\n\n      return finishNode(ast.forGenericStatement(variables, iterators, body));\n    }\n  }\n\n  // Local statements can either be variable assignments or function\n  // definitions. If a function definition is found, it will be delegated to\n  // `parseFunctionDeclaration()` with the isLocal flag.\n  //\n  // This AST structure might change into a local assignment with a function\n  // child.\n  //\n  //     local ::= 'local' 'function' Name funcdecl\n  //        | 'local' Name {',' Name} ['=' exp {',' exp}]\n\n  function parseLocalStatement() {\n    var name;\n\n    if (Identifier === token.type) {\n      var variables = []\n        , init = [];\n\n      do {\n        name = parseIdentifier();\n\n        variables.push(name);\n      } while (consume(','));\n\n      if (consume('=')) {\n        do {\n          var expression = parseExpectedExpression();\n          init.push(expression);\n        } while (consume(','));\n      }\n\n      // Declarations doesn't exist before the statement has been evaluated.\n      // Therefore assignments can't use their declarator. And the identifiers\n      // shouldn't be added to the scope until the statement is complete.\n      if (options.scope) {\n        for (var i = 0, l = variables.length; i < l; i++) {\n          scopeIdentifier(variables[i]);\n        }\n      }\n\n      return finishNode(ast.localStatement(variables, init));\n    }\n    if (consume('function')) {\n      name = parseIdentifier();\n\n      if (options.scope) {\n        scopeIdentifier(name);\n        createScope();\n      }\n\n      // MemberExpressions are not allowed in local function statements.\n      return parseFunctionDeclaration(name, true);\n    } else {\n      raiseUnexpectedToken('<name>', token);\n    }\n  }\n\n  function validateVar(node) {\n    // @TODO we need something not dependent on the exact AST used. see also isCallExpression()\n    if (node.inParens || (['Identifier', 'MemberExpression', 'IndexExpression'].indexOf(node.type) === -1)) {\n      raise(token, errors.invalidVar, token.value);\n    }\n  }\n\n  //     assignment ::= varlist '=' explist\n  //     var ::= Name | prefixexp '[' exp ']' | prefixexp '.' Name\n  //     varlist ::= var {',' var}\n  //     explist ::= exp {',' exp}\n  //\n  //     call ::= callexp\n  //     callexp ::= prefixexp args | prefixexp ':' Name args\n\n  function parseAssignmentOrCallStatement() {\n    // Keep a reference to the previous token for better error messages in case\n    // of invalid statement\n    var previous = token\n      , expression, marker;\n\n    if (trackLocations) marker = createLocationMarker();\n    expression = parsePrefixExpression();\n\n    if (null == expression) return unexpected(token);\n    if (',='.indexOf(token.value) >= 0) {\n      var variables = [expression]\n        , init = []\n        , exp;\n\n      validateVar(expression);\n      while (consume(',')) {\n        exp = parsePrefixExpression();\n        if (null == exp) raiseUnexpectedToken('<expression>', token);\n        validateVar(exp);\n        variables.push(exp);\n      }\n      expect('=');\n      do {\n        exp = parseExpectedExpression();\n        init.push(exp);\n      } while (consume(','));\n\n      pushLocation(marker);\n      return finishNode(ast.assignmentStatement(variables, init));\n    }\n    if (isCallExpression(expression)) {\n      pushLocation(marker);\n      return finishNode(ast.callStatement(expression));\n    }\n    // The prefix expression was neither part of an assignment or a\n    // callstatement, however as it was valid it's been consumed, so raise\n    // the exception on the previous token to provide a helpful message.\n    return unexpected(previous);\n  }\n\n\n\n  // ### Non-statements\n\n  //     Identifier ::= Name\n\n  function parseIdentifier() {\n    markLocation();\n    var identifier = token.value;\n    if (Identifier !== token.type) raiseUnexpectedToken('<name>', token);\n    next();\n    return finishNode(ast.identifier(identifier));\n  }\n\n  // Parse the functions parameters and body block. The name should already\n  // have been parsed and passed to this declaration function. By separating\n  // this we allow for anonymous functions in expressions.\n  //\n  // For local functions there's a boolean parameter which needs to be set\n  // when parsing the declaration.\n  //\n  //     funcdecl ::= '(' [parlist] ')' block 'end'\n  //     parlist ::= Name {',' Name} | [',' '...'] | '...'\n\n  function parseFunctionDeclaration(name, isLocal) {\n    var parameters = [];\n    expect('(');\n\n    // The declaration has arguments\n    if (!consume(')')) {\n      // Arguments are a comma separated list of identifiers, optionally ending\n      // with a vararg.\n      while (true) {\n        if (Identifier === token.type) {\n          var parameter = parseIdentifier();\n          // Function parameters are local.\n          if (options.scope) scopeIdentifier(parameter);\n\n          parameters.push(parameter);\n\n          if (consume(',')) continue;\n          else if (consume(')')) break;\n        }\n        // No arguments are allowed after a vararg.\n        else if (VarargLiteral === token.type) {\n          parameters.push(parsePrimaryExpression());\n          expect(')');\n          break;\n        } else {\n          raiseUnexpectedToken('<name> or \\'...\\'', token);\n        }\n      }\n    }\n\n    var body = parseBlock();\n    expect('end');\n    if (options.scope) destroyScope();\n\n    isLocal = isLocal || false;\n    return finishNode(ast.functionStatement(name, parameters, isLocal, body));\n  }\n\n  // Parse the function name as identifiers and member expressions.\n  //\n  //     Name {'.' Name} [':' Name]\n\n  function parseFunctionName() {\n    var base, name, marker;\n\n    if (trackLocations) marker = createLocationMarker();\n    base = parseIdentifier();\n\n    if (options.scope) {\n      attachScope(base, scopeHasName(base.name));\n      createScope();\n    }\n\n    while (consume('.')) {\n      pushLocation(marker);\n      name = parseIdentifier();\n      base = finishNode(ast.memberExpression(base, '.', name));\n    }\n\n    if (consume(':')) {\n      pushLocation(marker);\n      name = parseIdentifier();\n      base = finishNode(ast.memberExpression(base, ':', name));\n      if (options.scope) scopeIdentifierName('self');\n    }\n\n    return base;\n  }\n\n  //     tableconstructor ::= '{' [fieldlist] '}'\n  //     fieldlist ::= field {fieldsep field} fieldsep\n  //     field ::= '[' exp ']' '=' exp | Name = 'exp' | exp\n  //\n  //     fieldsep ::= ',' | ';'\n\n  function parseTableConstructor() {\n    var fields = []\n      , key, value;\n\n    while (true) {\n      markLocation();\n      if (Punctuator === token.type && consume('[')) {\n        key = parseExpectedExpression();\n        expect(']');\n        expect('=');\n        value = parseExpectedExpression();\n        fields.push(finishNode(ast.tableKey(key, value)));\n      } else if (Identifier === token.type) {\n        if ('=' === lookahead.value) {\n          key = parseIdentifier();\n          next();\n          value = parseExpectedExpression();\n          fields.push(finishNode(ast.tableKeyString(key, value)));\n        } else {\n          value = parseExpectedExpression();\n          fields.push(finishNode(ast.tableValue(value)));\n        }\n      } else {\n        if (null == (value = parseExpression())) {\n          locations.pop();\n          break;\n        }\n        fields.push(finishNode(ast.tableValue(value)));\n      }\n      if (',;'.indexOf(token.value) >= 0) {\n        next();\n        continue;\n      }\n      break;\n    }\n    expect('}');\n    return finishNode(ast.tableConstructorExpression(fields));\n  }\n\n  // Expression parser\n  // -----------------\n  //\n  // Expressions are evaluated and always return a value. If nothing is\n  // matched null will be returned.\n  //\n  //     exp ::= (unop exp | primary | prefixexp ) { binop exp }\n  //\n  //     primary ::= nil | false | true | Number | String | '...'\n  //          | functiondef | tableconstructor\n  //\n  //     prefixexp ::= (Name | '(' exp ')' ) { '[' exp ']'\n  //          | '.' Name | ':' Name args | args }\n  //\n\n  function parseExpression() {\n    var expression = parseSubExpression(0);\n    return expression;\n  }\n\n  // Parse an expression expecting it to be valid.\n\n  function parseExpectedExpression() {\n    var expression = parseExpression();\n    if (null == expression) raiseUnexpectedToken('<expression>', token);\n    else return expression;\n  }\n\n\n  // Return the precedence priority of the operator.\n  //\n  // As unary `-` can't be distinguished from binary `-`, unary precedence\n  // isn't described in this table but in `parseSubExpression()` itself.\n  //\n  // As this function gets hit on every expression it's been optimized due to\n  // the expensive CompareICStub which took ~8% of the parse time.\n\n  function binaryPrecedence(operator) {\n    var charCode = operator.charCodeAt(0)\n      , length = operator.length;\n\n    if (1 === length) {\n      switch (charCode) {\n        case 94: return 12; // ^\n        case 42: case 47: case 37: return 10; // * / %\n        case 43: case 45: return 9; // + -\n        case 38: return 6; // &\n        case 126: return 5; // ~\n        case 124: return 4; // |\n        case 60: case 62: return 3; // < >\n      }\n    } else if (2 === length) {\n      switch (charCode) {\n        case 47: return 10; // //\n        case 46: return 8; // ..\n        case 60: case 62:\n            if('<<' === operator || '>>' === operator) return 7; // << >>\n            return 3; // <= >=\n        case 61: case 126: return 3; // == ~=\n        case 111: return 1; // or\n      }\n    } else if (97 === charCode && 'and' === operator) return 2;\n    return 0;\n  }\n\n  // Implement an operator-precedence parser to handle binary operator\n  // precedence.\n  //\n  // We use this algorithm because it's compact, it's fast and Lua core uses\n  // the same so we can be sure our expressions are parsed in the same manner\n  // without excessive amounts of tests.\n  //\n  //     exp ::= (unop exp | primary | prefixexp ) { binop exp }\n\n  function parseSubExpression(minPrecedence) {\n    var operator = token.value\n    // The left-hand side in binary operations.\n      , expression, marker;\n\n    if (trackLocations) marker = createLocationMarker();\n\n    // UnaryExpression\n    if (isUnary(token)) {\n      markLocation();\n      next();\n      var argument = parseSubExpression(10);\n      if (argument == null) raiseUnexpectedToken('<expression>', token);\n      expression = finishNode(ast.unaryExpression(operator, argument));\n    }\n    if (null == expression) {\n      // PrimaryExpression\n      expression = parsePrimaryExpression();\n\n      // PrefixExpression\n      if (null == expression) {\n        expression = parsePrefixExpression();\n      }\n    }\n    // This is not a valid left hand expression.\n    if (null == expression) return null;\n\n    var precedence;\n    while (true) {\n      operator = token.value;\n\n      precedence = (Punctuator === token.type || Keyword === token.type) ?\n        binaryPrecedence(operator) : 0;\n\n      if (precedence === 0 || precedence <= minPrecedence) break;\n      // Right-hand precedence operators\n      if ('^' === operator || '..' === operator) precedence--;\n      next();\n      var right = parseSubExpression(precedence);\n      if (null == right) raiseUnexpectedToken('<expression>', token);\n      // Push in the marker created before the loop to wrap its entirety.\n      if (trackLocations) locations.push(marker);\n      expression = finishNode(ast.binaryExpression(operator, expression, right));\n\n    }\n    return expression;\n  }\n\n  //     prefixexp ::= prefix {suffix}\n  //     prefix ::= Name | '(' exp ')'\n  //     suffix ::= '[' exp ']' | '.' Name | ':' Name args | args\n  //\n  //     args ::= '(' [explist] ')' | tableconstructor | String\n\n  function parsePrefixExpression() {\n    var base, name, marker;\n\n    if (trackLocations) marker = createLocationMarker();\n\n    // The prefix\n    if (Identifier === token.type) {\n      name = token.value;\n      base = parseIdentifier();\n      // Set the parent scope.\n      if (options.scope) attachScope(base, scopeHasName(name));\n    } else if (consume('(')) {\n      base = parseExpectedExpression();\n      expect(')');\n      base.inParens = true; // XXX: quick and dirty. needed for validateVar\n    } else {\n      return null;\n    }\n\n    // The suffix\n    var expression, identifier;\n    while (true) {\n      if (Punctuator === token.type) {\n        switch (token.value) {\n          case '[':\n            pushLocation(marker);\n            next();\n            expression = parseExpectedExpression();\n            base = finishNode(ast.indexExpression(base, expression));\n            expect(']');\n            break;\n          case '.':\n            pushLocation(marker);\n            next();\n            identifier = parseIdentifier();\n            base = finishNode(ast.memberExpression(base, '.', identifier));\n            break;\n          case ':':\n            pushLocation(marker);\n            next();\n            identifier = parseIdentifier();\n            base = finishNode(ast.memberExpression(base, ':', identifier));\n            // Once a : is found, this has to be a CallExpression, otherwise\n            // throw an error.\n            pushLocation(marker);\n            base = parseCallExpression(base);\n            break;\n          case '(': case '{': // args\n            pushLocation(marker);\n            base = parseCallExpression(base);\n            break;\n          default:\n            return base;\n        }\n      } else if (StringLiteral === token.type) {\n        pushLocation(marker);\n        base = parseCallExpression(base);\n      } else {\n        break;\n      }\n    }\n\n    return base;\n  }\n\n  //     args ::= '(' [explist] ')' | tableconstructor | String\n\n  function parseCallExpression(base) {\n    if (Punctuator === token.type) {\n      switch (token.value) {\n        case '(':\n          next();\n\n          // List of expressions\n          var expressions = [];\n          var expression = parseExpression();\n          if (null != expression) expressions.push(expression);\n          while (consume(',')) {\n            expression = parseExpectedExpression();\n            expressions.push(expression);\n          }\n\n          expect(')');\n          return finishNode(ast.callExpression(base, expressions));\n\n        case '{':\n          markLocation();\n          next();\n          var table = parseTableConstructor();\n          return finishNode(ast.tableCallExpression(base, table));\n      }\n    } else if (StringLiteral === token.type) {\n      return finishNode(ast.stringCallExpression(base, parsePrimaryExpression()));\n    }\n\n    raiseUnexpectedToken('function arguments', token);\n  }\n\n  //     primary ::= String | Numeric | nil | true | false\n  //          | functiondef | tableconstructor | '...'\n\n  function parsePrimaryExpression() {\n    var literals = StringLiteral | NumericLiteral | BooleanLiteral | NilLiteral | VarargLiteral\n      , value = token.value\n      , type = token.type\n      , marker;\n\n    if (trackLocations) marker = createLocationMarker();\n\n    if (type & literals) {\n      pushLocation(marker);\n      var raw = input.slice(token.range[0], token.range[1]);\n      next();\n      return finishNode(ast.literal(type, value, raw));\n    } else if (Keyword === type && 'function' === value) {\n      pushLocation(marker);\n      next();\n      if (options.scope) createScope();\n      return parseFunctionDeclaration(null);\n    } else if (consume('{')) {\n      pushLocation(marker);\n      return parseTableConstructor();\n    }\n  }\n\n  // Parser\n  // ------\n\n  // Export the main parser.\n  //\n  //   - `wait` Hold parsing until end() is called. Defaults to false\n  //   - `comments` Store comments. Defaults to true.\n  //   - `scope` Track identifier scope. Defaults to false.\n  //   - `locations` Store location information. Defaults to false.\n  //   - `ranges` Store the start and end character locations. Defaults to\n  //     false.\n  //   - `onCreateNode` Callback which will be invoked when a syntax node is\n  //     created.\n  //   - `onCreateScope` Callback which will be invoked when a new scope is\n  //     created.\n  //   - `onDestroyScope` Callback which will be invoked when the current scope\n  //     is destroyed.\n  //\n  // Example:\n  //\n  //     var parser = require('luaparser');\n  //     parser.parse('i = 0');\n\n  exports.parse = parse;\n\n  function parse(_input, _options) {\n    if ('undefined' === typeof _options && 'object' === typeof _input) {\n      _options = _input;\n      _input = undefined;\n    }\n    if (!_options) _options = {};\n\n    input = _input || '';\n    options = extend(defaultOptions, _options);\n\n    // Rewind the lexer\n    index = 0;\n    line = 1;\n    lineStart = 0;\n    length = input.length;\n    // When tracking identifier scope, initialize with an empty scope.\n    scopes = [[]];\n    scopeDepth = 0;\n    globals = [];\n    locations = [];\n\n    if (options.comments) comments = [];\n    if (!options.wait) return end();\n    return exports;\n  }\n\n  // Write to the source code buffer without beginning the parse.\n  exports.write = write;\n\n  function write(_input) {\n    input += String(_input);\n    length = input.length;\n    return exports;\n  }\n\n  // Send an EOF and begin parsing.\n  exports.end = end;\n\n  function end(_input) {\n    if ('undefined' !== typeof _input) write(_input);\n\n    // Ignore shebangs.\n    if (input && input.substr(0, 2) === '#!') input = input.replace(/^.*/, function (line) {\n      return line.replace(/./g, ' ');\n    });\n\n    length = input.length;\n    trackLocations = options.locations || options.ranges;\n    // Initialize with a lookahead token.\n    lookahead = lex();\n\n    var chunk = parseChunk();\n    if (options.comments) chunk.comments = comments;\n    if (options.scope) chunk.globals = globals;\n\n    if (locations.length > 0)\n      throw new Error('Location tracking failed. This is most likely a bug in luaparse');\n\n    return chunk;\n  }\n\n}));\n/* vim: set sw=2 ts=2 et tw=79 : */\n"],"sourceRoot":""}